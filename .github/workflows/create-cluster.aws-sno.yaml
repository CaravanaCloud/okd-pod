name: Create OKD Cluster on AWS (single node / temporary)

on:
  workflow_dispatch:
    inputs:
      env_id:
        description: "Environment ID"
        required: true
        default: "qa"

jobs:
  create-okd-cluster:
    runs-on: ubuntu-latest

    env:
      ENV_ID: ${{ github.event.inputs.env_id }}
      CLUSTER_NAME: ${{ github.event.inputs.env_id }}okdc
      OCP_BASE_DOMAIN: "temp.strigus.cloud"
      INSTANCE_TYPE: "t3a.2xlarge"
      PULL_SECRET: ${{ secrets.TEMP_PULL_SECRET }}
      SSH_KEY: ${{ secrets.TEMP_SSH_KEY }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.REDHACKS_TEMP_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.REDHACKS_TEMP_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Check AWS auth
      run: aws sts get-caller-identity
        
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install OKD installer 
      env:
        INSTALL_URL: "https://github.com/okd-project/okd/releases/download/4.14.0-0.okd-2023-12-01-225814/openshift-install-linux-4.14.0-0.okd-2023-12-01-225814.tar.gz"        
      run: |
        mkdir -p "/tmp/openshift-install" \
        && wget -nv -O "/tmp/openshift-install/openshift-install-linux.tar.gz" "${INSTALL_URL}" \
        && tar zxvf "/tmp/openshift-install/openshift-install-linux.tar.gz" -C "/tmp/openshift-install" \
        && rm "/tmp/openshift-install/openshift-install-linux.tar.gz" \
        && mv "/tmp/openshift-install/openshift-install" "."
    
    - name: Check OKD installer
      run: ./openshift-install version

    - name: Install OKD clients
      env:
        INSTALL_URL: "https://github.com/okd-project/okd/releases/download/4.14.0-0.okd-2023-12-01-225814/openshift-client-linux-4.14.0-0.okd-2023-12-01-225814.tar.gz"
      run: |
        mkdir -p "/tmp/openshift-client" 
        wget -nv -O "/tmp/openshift-client/openshift-client-linux.tar.gz" "${INSTALL_URL}" 
        tar zxvf "/tmp/openshift-client/openshift-client-linux.tar.gz" -C "/tmp/openshift-client" 
        rm "/tmp/openshift-client/openshift-client-linux.tar.gz" 
        mv "/tmp/openshift-client/oc" "." 
        mv "/tmp/openshift-client/kubectl" "."

    - name: Check OKD clients
      run: ./oc version --client  
  
    - name: Check OKD installer
      run: ./openshift-install version

    - name: Generate OKD install-config
      run: envsubst < "install-config.aws-singlenode.env.yaml" > "install-config.yaml"

    - name: Check OKD install-config [DEBUG/REMOVE]
      run: cat install-config.yaml

    - name: Encrypt install-config
      run: |
        echo "${{ secrets.DEV_ARTIFACTS_GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 install-config.yaml
 
    - name: Store OKD install-config
      uses: actions/upload-artifact@v4
      with:
        name: install-config
        path: install-config.yaml.gpg

    - name: Create OKD cluster
      run: ./openshift-install create cluster --log-level debug
    
    - name: Wait for cluster install to verify
      run: ./openshift-install wait-for install-complete
    
    - name: Encrypt install log
      run: |
        echo "${{ secrets.DEV_ARTIFACTS_GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 .openshift_install.log
    
    - name: Store OKD install log
      uses: actions/upload-artifact@v4
      with:
        name: install-log
        path: .openshift_install.log.gpg
    
    - name: Encryt kubeconfig
      run: |
        echo "${{ secrets.DEV_ARTIFACTS_GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 auth/kubeconfig

    - name: Store kubeconfig
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig
        path: auth/kubeconfig.gpg
    
    - name: Check file tree
      run: find .


